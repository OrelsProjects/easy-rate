generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// NextAuth adapter 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

// NextAuth adapter 

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  meta          AppUserMetadata?
  settings      AppUserSettings?
  Payment       Payment[]
  Website       Website[]
  Account       Account[]
  Session       Session[]
  Authenticator Authenticator[]
  ApiKey        ApiKey[]

  @@map("user")
}

model AppUserMetadata {
  appUserMetadataId String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @unique @db.ObjectId

  maxApiKeys Int @default(0)

  appUser User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appUserMetadata")
}

model AppUserSettings {
  appUserSettingsId String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @unique @db.ObjectId

  appUser User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("appUserSettings")
}

model Payment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String? @map("user_id") @db.ObjectId
  priceId   String @map("price_id")
  sessionId String @map("session_id")
  productId String @map("product_id")

  productName     String  @map("product_name")
  amountReceived  Int     @map("amount_received")
  currency        String  @map("currency")
  status          String  @map("status")
  paymentMethodId String? @map("payment_method_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  appUser User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Website {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @map("user_id") @db.ObjectId
  url    String?
  apiKey String?

  createdAt DateTime @default(now()) @map("created_at")

  user          User           @relation(fields: [userId], references: [id])
  reviews       Review[]
  notifications Notification[]
}

model Review {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  websiteId     String         @map("website_id") @db.ObjectId
  rating        Int            @default(0) // 0-5
  comment       String?
  createdAt     DateTime       @default(now()) @map("created_at")
  website       Website        @relation(fields: [websiteId], references: [id])
  notifications Notification[]
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  websiteId String   @map("website_id") @db.ObjectId
  reviewId  String?  @map("review_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  website   Website  @relation(fields: [websiteId], references: [id])
  review    Review?  @relation(fields: [reviewId], references: [id])
}

model ApiKey {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @map("user_id") @db.ObjectId
  key       String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  expiresAt DateTime? // Optional expiration date for the key
  user      User      @relation(fields: [userId], references: [id])
  isActive  Boolean   @default(true)
}
